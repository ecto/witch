{
  let lastLineIndentLevel = 0;
  let currentIndentLevel = 0;

  function make(type, value) {
    return {
      type,
      value,
    };
  }
}

Start
  = Newline* statements:Statement* {
    return statements;
  }

Statement
  = Samedent
    value:Word+
    Newline*
    Indent
    children:Statement*
    Outdent
    Newline* {
      return {
        type: 'statement',
        value,
        children,
        };
      }

Word
  = SubIdentifier
  / Identifier
  / Literal
  / ShapeName

Identifier "identifier"
  = start:[a-z_$] meat:[a-zA-Z_$0-9]* Space? {
    const name = start + meat.join('');
    return make('identifier', name);
  }

SubIdentifier
  = identifiers:(Identifier "." Identifier) {
    const ids = identifiers.filter(id => id.type === 'identifier').map(id => id.value);
    return make('identifier', ids);
  }

ShapeName "shape identifier"
  = start:[A-Z] meat:[a-zA-Z_$0-9]* Space? {
    const name = start + meat.join('');
    return make('shapeIdentifier', name);
  }


SourceCharacter
  = .

DoubleNewline "double newline"
  = Newline Newline

Newline "newline"
  = [\n\r\u2028\u2029]

Space "single space"
  = " "

Literal
  = StringLiteral
  / NumberLiteral

SingleQuote
  = "'"

StringLiteral "string"
  = SingleQuote chars:SingleStringCharacter* SingleQuote Space? {
    return make('string', chars.join(''));
  }

SingleStringCharacter
  = !SingleQuote char:SourceCharacter {
    return char[0];
  }

NumberLiteral "number"
  = IntLiteral
  / FloatLiteral

IntLiteral
  = chars:[0-9]+ Space? {
    const int = parseInt(chars.join(''));
    return make('number', int);
  }

FloatLiteral
  = left:[0-9]* "." right:[0-9]+ Space? {
    const float = parseFloat(
      left.join('') + '.' + right.join('')
    );
    return make('number', float)
  }

EOF
  = !.

Samedent
  = indents:(Space Space)* &{
    return indents.length === currentIndentLevel;
  }

Indent "indent"
  = &{
    currentIndentLevel++;
    return true;
  }

Outdent
  = &{
    currentIndentLevel--;
    return true;
  }
